# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'
require 'net/http'
require 'uri'

Vagrant.require_version ">= 1.6.0"

$num_instances = 6
CLOUD_CONFIG_PATH = File.join(File.dirname(__FILE__), "user-data")
CONFIG = File.join(File.dirname(__FILE__), "config.rb")

# Defaults for config options defined in CONFIG
$coreos_iso_url = "https://stable.release.core-os.net/amd64-usr/current/coreos_production_iso_image.iso"
$coreos_iso_image = "coreos_production_iso_image.iso"
$insert_ssh_key_in_iso = true
$instance_name_prefix = "core"
$update_channel = "stable"
$image_version = "current"
$enable_serial_logging = false
$share_home = false
$vm_gui = false
$vm_memory = 1100
$vm_cpus = 1
$number_of_additional_disk = 2
$vb_cpuexecutioncap = 100
$shared_folders = {}
$forwarded_ports = {}
$bridge_if = "wlp4s0"
$mac_address = [
  '080027F47653',
  '080027C80CEA',
  '080027887DE5',
  '080027887DE6',
  '080027887DE7',
  '080027887DE8',
  '080027887DE9',
]

# Attempt to apply the deprecated environment variable NUM_INSTANCES to
# $num_instances while allowing config.rb to override it
if ENV["NUM_INSTANCES"].to_i > 0 && ENV["NUM_INSTANCES"]
  $num_instances = ENV["NUM_INSTANCES"].to_i
end

if File.exist?(CONFIG)
  require CONFIG
end

#Â Download coreos iso
unless File.file?($coreos_iso_image)
  puts("Downloading CoreOS iso...")
  File.write($coreos_iso_image, Net::HTTP.get(URI.parse($coreos_iso_url)))
  if $insert_ssh_key_in_iso
    puts("Inserting SSH key in ISO file...")
    %x('./insert_ssh_key_in_iso.sh')
  end
end

# Use old vb_xxx config variables when set
def vm_gui
  $vb_gui.nil? ? $vm_gui : $vb_gui
end

def vm_memory
  $vb_memory.nil? ? $vm_memory : $vb_memory
end

def vm_cpus
  $vb_cpus.nil? ? $vm_cpus : $vb_cpus
end

Vagrant.configure("2") do |config|
  # always use Vagrants insecure key
  config.ssh.insert_key = false
  # forward ssh agent to easily ssh into the different machines
  config.ssh.forward_agent = true

  #config.vm.box = "coreos-%s" % $update_channel
  config.vm.box = "c33s/empty"
  #config.vm.box = "olbat/tiny-core-micro"
  #if $image_version != "current"
  #    config.vm.box_version = $image_version
  #end
  #config.vm.box_url = "https://storage.googleapis.com/%s.release.core-os.net/amd64-usr/%s/coreos_production_vagrant.json" % [$update_channel, $image_version]

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  (1..$num_instances).each do |i|
  config.vm.define vm_name = "%s%02d" % [$instance_name_prefix, i] do |config|
    config.vm.hostname = vm_name

    # SSH timeout
    config.vm.boot_timeout = 1
    #config.ssh.max_tries = 1
    #config.ssh.timeout = 1

    if $enable_serial_logging
      logdir = File.join(File.dirname(__FILE__), "log")
      FileUtils.mkdir_p(logdir)

      serialFile = File.join(logdir, "%s-serial.txt" % vm_name)
      FileUtils.touch(serialFile)

      config.vm.provider :virtualbox do |vb, override|
        vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
        vb.customize ["modifyvm", :id, "--uartmode1", serialFile]
      end
    end

    #Â DVD
    config.vm.provider :virtualbox do |vb, override|
      vb.customize ["storageattach", :id, "--storagectl", "IDE", "--port", "1", "--device", "0", "--type", "dvddrive", "--medium", "coreos_production_iso_image.iso"]
    end

    # Additionnal disks
    if $number_of_additional_disk != 0
      config.vm.provider :virtualbox do |vb|
        controller = 'SATA'
        #vb.customize ["storagectl", :id, "--name", "#{controller}", "--add", "sata"]
        (1..$number_of_additional_disk).each do |cn|
          file_to_disk = vm_name.to_s + '_' + 'disk' + cn.to_s + '.vdi'
          vb.customize ['createhd', '--filename', file_to_disk, '--size', 1 * 1024]
          vb.customize ['storageattach', :id, '--storagectl', "#{controller}", '--port', cn, '--type', 'hdd', '--medium', file_to_disk]
        end
      end
    end

    #if $expose_docker_tcp
    #  config.vm.network "forwarded_port", guest: 2375, host: ($expose_docker_tcp + i - 1), host_ip: "127.0.0.1", auto_correct: true
    #end

    #$forwarded_ports.each do |guest, host|
    #  config.vm.network "forwarded_port", guest: guest, host: host, auto_correct: true
    #end

    ip = "172.17.8.#{i+100}"
    config.vm.network :private_network, ip: ip

    config.vm.network :public_network, :bridge => "#{$bridge_if}", :mac => "#{$mac_address[i-1]}"

    config.vm.provider :virtualbox do |vb|
      vb.gui = vm_gui
      vb.memory = vm_memory
      vb.cpus = vm_cpus
      vb.customize ["modifyvm", :id, "--cpuexecutioncap", "#{$vb_cpuexecutioncap}"]
      #Â Boot order
      vb.customize ["modifyvm", :id, "--boot1", "dvd", "--boot2", "disk", "--boot3", "none", "--boot4", "none" ]
      # Network promiscous
      vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
      vb.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
    end

    # Uncomment below to enable NFS for sharing the host machine into the coreos-vagrant VM.
    #config.vm.synced_folder ".", "/home/core/share", id: "core", :nfs => true, :mount_options => ['nolock,vers=3,udp']
    #$shared_folders.each_with_index do |(host_folder, guest_folder), index|
    #  config.vm.synced_folder host_folder.to_s, guest_folder.to_s, id: "core-share%02d" % index, nfs: true, mount_options: ['nolock,vers=3,udp']
    #end

    #if $share_home
    #  config.vm.synced_folder ENV['HOME'], ENV['HOME'], id: "home", :nfs => true, :mount_options => ['nolock,vers=3,udp']
    #end

    #if File.exist?(CLOUD_CONFIG_PATH)
    #  config.vm.provision :file, :source => "#{CLOUD_CONFIG_PATH}", :destination => "/tmp/vagrantfile-user-data"
    #  config.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
    #end

    end
  end
end
